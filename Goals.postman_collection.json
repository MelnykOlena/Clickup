{
	"info": {
		"_postman_id": "4d68e1ad-efb4-4b15-8046-f972518eaa59",
		"name": "Goals",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17751078"
	},
	"item": [
		{
			"name": "Get Goals",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}team/9012319082/goal?include_completed=true",
					"host": [
						"{{base_url}}team"
					],
					"path": [
						"9012319082",
						"goal"
					],
					"query": [
						{
							"key": "include_completed",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Goal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"   var jsonData = pm.response.json();\r",
							"console.log(jsonData.goal.id)\r",
							"\r",
							"\r",
							"pm.collectionVariables.set(\"goal_id\", jsonData.goal.id);\r",
							"",
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Content-Type is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})",
							"",
							"pm.test('Validate the goal object', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.goal).to.exist.and.to.be.an('object');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "pk_2144445533_LLTKB3H1BMSGNOTWVTM4R6B6Q5O0H9D8"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{$randomCompanyName}}\",\n    \"due_date\": 1568036964079,\n    \"description\": \"Goal Description\",\n    \"multiple_owners\": true,\n    \"owners\": [\n      2144445533\n    ],\n    \"color\": \"#32a852\"\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}team/9012319082/goal",
					"host": [
						"{{base_url}}team"
					],
					"path": [
						"9012319082",
						"goal"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Goal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Content-Type is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})",
							"",
							"pm.test('Validate the \\'goal\\' object', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.goal).to.exist.and.to.be.an('object');",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "pk_2144445533_LLTKB3H1BMSGNOTWVTM4R6B6Q5O0H9D8"
					}
				],
				"url": {
					"raw": "{{base_url}}goal/{{goal_id}}",
					"host": [
						"{{base_url}}goal"
					],
					"path": [
						"{{goal_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Goal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.include.all.keys(",
							"        'id', 'name', 'team_id', 'creator', 'color', 'date_created', ",
							"        'start_date', 'due_date', 'description', 'private', 'archived', ",
							"        'multiple_owners', 'editor_token', 'date_updated', 'folder_id', ",
							"        'folder_name', 'members', 'group_members', 'owners', 'key_results', ",
							"        'key_result_count', 'percent_completed', 'history', 'pretty_url'",
							"    );",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.goal.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
							"});",
							"",
							"pm.test(\"Team_id is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.goal.team_id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Team_id should be a non-empty string\");",
							"});",
							"",
							"pm.test(\"Creator is non-negative\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.goal.creator).to.be.a('number').and.to.be.at.least(0, \"Creator should be a non-negative number\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "pk_2144445533_LLTKB3H1BMSGNOTWVTM4R6B6Q5O0H9D8"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Updated Goal Name\",\n    \"due_date\": 1568036964079,\n    \"description\": \"Updated Goal Description\",\n    \"rem_owners\": [\n      2144445533\n    ],\n    \"add_owners\": [\n      2144445533\n    ],\n    \"color\": \"#32a852\"\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}goal/{{goal_id}}",
					"host": [
						"{{base_url}}goal"
					],
					"path": [
						"{{goal_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Key Result",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							" var jsonData = pm.response.json();\r",
							" console.log(jsonData.key_result.id)\r",
							"\r",
							"\r",
							"pm.collectionVariables.set(\"keyresult_id\", jsonData.key_result.id);",
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - err and ECODE\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('err');",
							"    pm.expect(responseData).to.have.property('ECODE');",
							"});",
							"",
							"",
							"pm.test(\"Err field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.err).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Err field should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Ecode field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.ECODE).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Ecode field should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "pk_2144445533_LLTKB3H1BMSGNOTWVTM4R6B6Q5O0H9D8"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Key Result Name\",\n    \"owners\": [\n      2144445533\n    ],\n    \"type\": \"number\",\n    \"steps_start\": 0,\n    \"steps_end\": 10,\n    \"unit\": \"km\",\n    \"task_ids\": [],\n    \"list_ids\": []\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}goal/{{goal_id}}/key_result",
					"host": [
						"{{base_url}}goal"
					],
					"path": [
						"{{goal_id}}",
						"key_result"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Key Result",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "pk_2144445533_LLTKB3H1BMSGNOTWVTM4R6B6Q5O0H9D8"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"steps_current\": 5,\n    \"note\": \"Target achieved\"\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}key_result/{{keyresult_id}}",
					"host": [
						"{{base_url}}key_result"
					],
					"path": [
						"{{keyresult_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Key Result",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "pk_2144445533_LLTKB3H1BMSGNOTWVTM4R6B6Q5O0H9D8"
					}
				],
				"url": {
					"raw": "{{base_url}}key_result/{{keyresult_id}}",
					"host": [
						"{{base_url}}key_result"
					],
					"path": [
						"{{keyresult_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Goal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"",
							"",
							"",
							"pm.test(\"Validate that the goal is deleted successfully\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"    pm.expect(pm.response.json()).to.be.an('object').that.is.empty;",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "pk_2144445533_LLTKB3H1BMSGNOTWVTM4R6B6Q5O0H9D8"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}goal/{{goal_id}}",
					"host": [
						"{{base_url}}goal"
					],
					"path": [
						"{{goal_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "goal_id",
			"value": ""
		},
		{
			"key": "keyresult_id",
			"value": ""
		}
	]
}